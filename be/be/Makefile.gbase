#
# Copyright (C) 2004-2006 Tensilica, Inc.  All Rights Reserved.
# Revised to support Tensilica processors and to improve overall performance
#
#  Copyright (C) 2000 Silicon Graphics, Inc.  All Rights Reserved.
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of version 2 of the GNU General Public License as
#  published by the Free Software Foundation.
#
#  This program is distributed in the hope that it would be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
#
#  Further, this software is distributed without any warranty that it is
#  free of the rightful claim of any third person regarding infringement 
#  or the like.  Any license provided herein, whether implied or 
#  otherwise, applies only to this software file.  Patent licenses, if 
#  any, provided herein do not apply to combinations of this program with 
#  other software, or any other product whatsoever.  
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write the Free Software Foundation, Inc., 59
#  Temple Place - Suite 330, Boston MA 02111-1307, USA.
#
#  Contact information:  Silicon Graphics, Inc., 1600 Amphitheatre Pky,
#  Mountain View, CA 94043, or:
#
#  http://www.sgi.com
#
#  For further information regarding this notice, see:
#
#  http://oss.sgi.com/projects/GenInfo/NoticeExplan
#
#

#
#  Makefile.base for be
#

#----------------------------------------------------------------------
#  Information about Makefile
#
#  This Makefile is used to build the 32 bit host/target version of the
#  code generator.
#
#  *  This Makefile does not require that targ_info has already been built.
#
#  *  Because the Makefile removes temporary files that are in the
#     current directory (at startup and on interrupts) you can't
#     run two or more makes in the same directory at the same time.
#     (Perhaps, If I could force the temp files out to a temp directory,
#     this could be changed?)
#
#----------------------------------------------------------------------

#----------------------------------------------------------------------
#  Set environment variables
#
#  TARGDIR   :  is the targ specific directory in which we do build.
#               e.q.  /d1/cmplrs.src/v4.00/host32
#----------------------------------------------------------------------
TARGDIR = $(BUILD_AREA)
CURDIR  = .

#----------------------------------------------------------------------
#  Include the usual commondefs
#----------------------------------------------------------------------
include $(COMMONDEFS)

#----------------------------------------------------------------------
#  Set environment variables
#
#  TARG_BE_DIR: is the be directory in which we do build... this can
#               be retargeted (e.g., for building be with different options)
#               by setting LOCAL_BE_DIR in localdefs
#  TARG_OPT_DIR: is the wopt directory in which we build wopt.so. This can
#               be retargeted (e.g., for building using opt_dev)
#               by setting LOCAL_WOPT_DIR in localdefs.  BE_OPT_DIR
#		later is similarly retarged based on LOCAL_OPT_DIR --
#		you should generally set them together.
#----------------------------------------------------------------------

ifeq ($(BUILD_COMPILER), EDG)
CVERSION = -xansi
WOFF     = -fullwarn
WOFF2    = -woff 1172,3260
else
CVERSION =
WOFF     =
WOFF2    =
endif

ifdef LOCAL_BE_DIR
TARG_BE_DIR = $(TARGDIR)/$(LOCAL_BE_DIR)
else
TARG_BE_DIR = $(TARGDIR)/be
endif
ifdef LOCAL_WOPT_DIR
TARG_WOPT_DIR = $(TARGDIR)/$(LOCAL_WOPT_DIR)
else
TARG_WOPT_DIR = $(TARGDIR)/wopt
endif
ifdef LOCAL_CG_DIR
TARG_CG_DIR = $(TARGDIR)/$(LOCAL_CG_DIR)
else
TARG_CG_DIR = $(TARGDIR)/cg
endif
ifdef LOCAL_TARG_INFO_DIR
TARG_TARG_INFO_DIR = $(TARGDIR)/$(LOCAL_TARG_INFO_DIR)
else
TARG_TARG_INFO_DIR = $(TARGDIR)/targ_info
endif
ifdef LOCAL_LIBAUTO_DIR
TARG_LIBAUTO_DIR = $(TARGDIR)/$(LOCAL_LIBAUTO_DIR)
else
TARG_LIBAUTO_DIR = $(TARGDIR)/../libauto
endif

#----------------------------------------------------------------------
#  Compiler Options
#----------------------------------------------------------------------
HOSTDEFS += -D_LEGO_CLONER
HOSTDEFS += -DBACK_END
HOSTDEFS += -Dlonglong
HOSTDEFS += -DSTD_MONGOOSE_LOC='"$(STD_MONGOOSE_LOC)"' -DMONGOOSE_BE
# need to define _LONGLONG and _SVR4_SOURCE to allow compilation with -ansi.
HOSTDEFS += -D_LONGLONG -D_SVR4_SOURCE
HOSTDEFS += -D_NEW_SYMTAB
ifeq ($(BUILD_OS), CYGWIN)
HOSTDEFS += -DDLL_SHARED=__declspec\(dllexport\)
else
HOSTDEFS += -DDLL_SHARED=
endif

ifeq ($(BUILD_TARGET), IA64)
HOSTDEFS += -D__MIPS_AND_IA64_ELF_H
endif
ifeq ($(BUILD_TARGET), IA32)
HOSTDEFS += -D__MIPS_AND_IA64_ELF_H
endif
ifeq ($(BUILD_TARGET), XTENSA)
HOSTDEFS += -D__MIPS_AND_IA64_ELF_H
endif

ifeq ($(BUILD_OPTIMIZE), DEBUG)
HOSTDEFS += -DIs_True_On
endif
ifeq ($(BUILD_PCH), USE_PCH)
HOSTDEFS += -DUSE_PCH 
endif

TARG_INFO_INC_DIR = $(TARG_TARG_INFO_DIR)
TARG_INFO_LIB_DIR = $(TARG_TARG_INFO_DIR)

#----------------------------------------------------------------------
#  List of directories, and source files of interest
#----------------------------------------------------------------------

LIBISA_DIR		= $(BUILD_TOT)/../libisa
LIBTIE_DIR		= $(BUILD_TOT)/../libtie
LIBAUTO_DIR		= $(BUILD_TOT)/../libauto
LIBCOMMON_DIR		= $(BUILD_TOT)/../libcommon
LIBFUSION_DIR		= $(BUILD_TOT)/../libfusion
BE_DIR 			= $(BUILD_TOT)/be
BE_BE_DIR		= $(BE_DIR)/be
BE_CG_DIR 		= $(BE_DIR)/cg
BE_COM_DIR 		= $(BE_DIR)/com
BE_REGION_DIR 		= $(BE_DIR)/region
ifdef LOCAL_OPT_DIR
BE_OPT_DIR 		= $(BE_DIR)/$(LOCAL_OPT_DIR)
else
BE_OPT_DIR 		= $(BE_DIR)/opt
endif
BE_LNO_DIR		= $(BE_DIR)/lno
BE_WHIRL2C_DIR		= $(BE_DIR)/whirl2c
BE_WHIRL2F_DIR		= $(BE_DIR)/whirl2f
BE_PURPLE2_DIR		= $(BE_DIR)/purple2
BE_PROMPF_ANL_DIR       = $(BE_DIR)/prompf_anl
BE_VHO_DIR		= $(BE_DIR)/vho
IPL_DIR			= $(BUILD_TOT)/ipa/local
IPA_DIR			= $(BUILD_TOT)/ipa/main/analyze
IPC_DIR			= $(BUILD_TOT)/ipa/common
COMMON_DIR 		= $(BUILD_TOT)/common
COMMON_COM_DIR 		= $(COMMON_DIR)/com
COMMON_UTIL_DIR		= $(COMMON_DIR)/util
COMMON_TARG_INFO_LIBTI_DIR = $(COMMON_DIR)/targ_info/libti
COMMON_TARG_INFO_STATIC_DIR = $(COMMON_DIR)/targ_info/static
COMMON_TARG_INFO_ACCESS_DIR = $(COMMON_TARG_INFO_STATIC_DIR)/access
COMMON_UTIL_DIR 	= $(COMMON_DIR)/util
COMMON_UTIL_TARG_DIR 	= $(COMMON_UTIL_DIR)/$(BUILD_TARGET_DIR)
BE_BE_TARG_DIR		= $(COMMON_TARG_INFO_STATIC_DIR)/be/be/$(BUILD_TARGET_DIR)
BE_COM_TARG_DIR		= $(COMMON_TARG_INFO_STATIC_DIR)/be/com/$(BUILD_TARGET_DIR)
COMMON_COM_TARG_DIR 	= $(COMMON_TARG_INFO_STATIC_DIR)/common/com/$(BUILD_TARGET_DIR)
COMMON_INSTR_DIR 	= $(BUILD_TOT)/common/instrument

# These are the directories in which to look for source files.

SRC_DIRS = \
  $(BE_COM_DIR)		\
  $(BE_COM_TARG_DIR)	\
  $(BE_REGION_DIR)	\
  $(BE_VHO_DIR)		\
  $(BE_LNO_DIR)		\
  $(BE_CG_DIR)		\
  $(COMMON_COM_DIR)	\
  $(COMMON_COM_TARG_DIR)\
  $(COMMON_UTIL_DIR)	\
  $(COMMON_UTIL_TARG_DIR)\
  $(BE_BE_DIR)		\
  $(BE_BE_TARG_DIR)	\
  $(COMMON_INSTR_DIR)

HEADER_DIRS = \
  $(SRC_DIRS)		\
  $(LIBISA_DIR)		\
  $(LIBTIE_DIR)		\
  $(LIBAUTO_DIR)	\
  $(LIBCOMMON_DIR)	\
  $(LIBFUSION_DIR)	\
  $(COMMON_TARG_INFO_ACCESS_DIR)\
  $(COMMON_TARG_INFO_LIBTI_DIR)\
  $(TARG_INFO_INC_DIR)	\
  $(COMMON_UTIL_DIR)	\
  $(CURDIR)		\
  $(BE_DIR)		\
  $(BE_COM_TARG_DIR)	\
  $(BE_CG_DIR)		\
  $(BE_OPT_DIR)		\
  $(BE_LNO_DIR)		\
  $(BE_REGION_DIR)	\
  $(BE_WHIRL2C_DIR)	\
  $(BE_WHIRL2F_DIR)	\
  $(BE_PURPLE2_DIR)	\
  $(BE_PROMPF_ANL_DIR)	\
  $(BE_VHO_DIR)		\
  $(IPL_DIR)	 	\
  $(IPA_DIR)		\
  $(IPC_DIR)		\
  $(COMMON_INSTR_DIR)

ifeq ($(BUILD_OS), CYGWIN)
LMAIL = -liberty
else
HEADER_DIRS += $(TARGDIR)/include/libelf
LMAIL = -ldl
endif

#----------------------------------------------------------------------
# Build derived files
#
# Be sure to also add .c files to the DERIVED_SRCS list, and the 
# various include files to the DERIVED_INCS list
# 
#----------------------------------------------------------------------

DERIVED_SRCS += preg_list.cxx
DERIVED_INCS += preg_list.h
# remove all derived files with make clobber.
LDIRT = $(DERIVED_INCS) $(DERIVED_SRCS)

#----------------------------------------------------------------------
#  List of source files.  Please keep them in alphabetical order.
#----------------------------------------------------------------------

BE_BE_CXX_SRCS = 	\
  cleanup.cxx		\
  fill_align.cxx        \
  mem_ctr.cxx           \
  dra_ec.cxx		\
  dra_clone.cxx     	\
  dra_mangle.cxx	\
  omp_lower.cxx		\
  privatize_common.cxx	\
  rewrite_pragmas.cxx	\
  wb_omp.cxx		\
  wb_lwr.cxx		\
  wb_anl.cxx


BE_BE_TARG_CXX_SRCS =	\
  fill_align_targ.cxx	\
  driver_targ.cxx


BE_REGION_CXX_SRCS = \
  ori.cxx		\
  rbi.cxx		\
  region_init.cxx	\
  region_bounds.cxx	\
  region_util.cxx

BE_VHO_CXX_SRCS = \
  f90_lower.cxx           \
  f90_lower_dep.cxx     \
  vho_lower.cxx		\
  wb_f90_lower.cxx	\

COMMON_COM_CXX_SRCS = \
  at_op_xcc.cxx \
  at_xcc.cxx \
  config.cxx		\
  config_cache.cxx	\
  dra_demangle.cxx	\
  dwarf_DST.cxx		\
  dwarf_DST_dump.cxx	\
  dwarf_DST_producer.cxx	\
  fb_info.cxx		\
  intrn_info.cxx	\
  ll.cxx		\
  mtypes.cxx		\
  opcode.cxx		\
  opcode_core.cxx	\
  tie.cxx		\
  wutil.cxx		\


COMMON_COM_PCH_CXX_SRCS = \
  const.cxx		\
  dwarf_DST_mem.cxx	\
  err_host.cxx		\
  f90_utils.cxx		\
  glob.cxx		\
  dra_file_util.cxx     \
  ir_bcom.cxx		\
  ir_bread.cxx		\
  ir_bwrite.cxx		\
  ir_reader.cxx		\
  irbdata.cxx		\
  pu_info.cxx		\
  strtab.cxx		\
  symtab.cxx		\
  symtab_verify.cxx	\
  ttype.cxx		\
  wn.cxx		\
  wn_map.cxx		\
  wn_pragmas.cxx	\
  wn_simp.cxx           \
  wn_util.cxx		\
  xstats.cxx

ifeq ($(BUILD_PCH), USE_PCH)
COMMON_COM_PCH_OBJS=$(COMMON_COM_PCH_CXX_SRCS:.cxx=.o)
else
COMMON_COM_CXX_SRCS += $(COMMON_COM_PCH_CXX_SRCS)
endif 

COMMON_COM_TARG_SRCS =	\
  config_host.c		\
  config_platform.c

COMMON_COM_TARG_CXX_SRCS =	\
  config_cache_targ.cxx	\
  config_targ.cxx	\
  config_elf_targ.cxx	\
  targ_const.cxx	\
  targ_sim.cxx

ifeq ($(BUILD_TARGET), MIPS)
COMMON_UTIL_QUAD_SRCS = \
  c_q_add.c		\
  c_q_div.c		\
  c_q_mul.c		\
  c_q_neg.c		\
  c_q_rel.c		\
  c_q_sqrt.c		\
  c_q_sub.c		\
  c_q_to_a.c		\
  c_qtenscale.c		\
  quadsim.c
else
COMMON_UTIL_QUAD_SRCS =
endif

COMMON_UTIL_SRCS =	\
  $(COMMON_UTIL_QUAD_SRCS)	\
  dso.c			\
  file_util.c		\
  flags.c		\
  memory.c		\
  priority_queue.c	\
  resource.c		\
  tlog.c		\
  tracing.c		\
  util.c		\
  vstring.c


ifeq ($(BUILD_OS), SOLARIS)
COMMON_UTIL_SRCS += strsep.c
endif
ifeq ($(BUILD_OS), CYGWIN)
COMMON_UTIL_SRCS += winutil.c
endif

ifdef LOCAL_COMMON_UTIL_SRCS
COMMON_UTIL_SRCS += $(LOCAL_COMMON_UTIL_SRCS)
endif

BE_C_SRCS = \
  $(COMMON_UTIL_SRCS)           \
  $(COMMON_COM_TARG_SRCS)


BE_C_OBJS =  $(BE_C_SRCS:.c=.o)

BE_COM_CXX_SRCS = \
  be_util.cxx           \
  be_version.cxx        \
  cxx_base.cxx		\
  cxx_graph.cxx		\
  cxx_hash_util.cxx	\
  mfmc_misc.cxx		\
  mfmc_query.cxx	\
  mfmc_setup.cxx	\
  mfmc_solve.cxx	\
  opt_addr_flags.cxx	\
  opt_cvtl_rule.cxx	\
  printsrc.cxx		\
  timing.cxx	 	\
  weak.cxx		\
  wn_instrument.cxx

BE_COM_PCH_CXX_SRCS = \
  be_symtab.cxx		\
  data_layout.cxx	\
  dep_graph.cxx		\
  dvector.cxx		\
  emulate.cxx		\
  fb_cfg.cxx		\
  fb_whirl.cxx		\
  opt_alias_mgr.cxx	\
  opt_alias_rule.cxx	\
  opt_goto.cxx		\
  opt_ipaa_io.cxx	\
  opt_points_to_non_template.cxx	\
  prompf.cxx		\
  standardize.cxx	\
  stblock.cxx		\
  w2op.cxx		\
  wb.cxx		\
  wb_browser.cxx	\
  wb_buffer.cxx		\
  wb_carray.cxx		\
  wb_ipl.cxx		\
  wb_util.cxx		\
  whirl2src.cxx		\
  wn_fio.cxx		\
  wn_lower.cxx		\
  u64_lower_wn.cxx	\
  wn_mp.cxx		\
  wn_mp_dg.cxx		\
  wn_verifier.cxx       \
  $(DERIVED_SRCS)

ifeq ($(BUILD_PCH), USE_PCH)
BE_COM_PCH_OBJS=$(BE_COM_PCH_CXX_SRCS:.cxx=.o)
else
BE_COM_CXX_SRCS += $(BE_COM_PCH_CXX_SRCS)
endif 

BE_COM_TARG_CXX_SRCS = \
  betarget.cxx		\
  sections.cxx

BE_COM_CXX_SRCS +=	\
  clone.cxx		\
  clone_DST_utils.cxx	\


BE_LNO_CXX_SRCS = \
  soe.cxx \
  mat.cxx 

BE_CG_CXX_SRCS = \
  cg_prof.cxx

COMMON_UTIL_CXX_SRCS = \
  cxx_memory.cxx	\
  errors.cxx		\
  options_stack.cxx

INSTR_COM_CXX_SRCS = \
  instr_reader.cxx

BE_CXX_SRCS = \
  $(BE_BE_CXX_SRCS)	\
  $(BE_BE_TARG_CXX_SRCS) \
  $(BE_COM_CXX_SRCS)	\
  $(COMMON_COM_CXX_SRCS) \
  $(COMMON_UTIL_CXX_SRCS) \
  $(BE_REGION_CXX_SRCS)	\
  $(BE_LNO_CXX_SRCS)	\
  $(BE_CG_CXX_SRCS)	\
  $(BE_VHO_CXX_SRCS)    \
  $(BE_COM_TARG_CXX_SRCS) \
  $(COMMON_COM_TARG_CXX_SRCS) \
  $(INSTR_COM_CXX_SRCS)

BE_CXX_OBJS = $(BE_CXX_SRCS:.cxx=.o)

ifeq ($(BUILD_TARGET), MIPS)
COMMON_UTIL_TARG_AS_SRCS = \
  c_qwmultu.s
else
COMMON_UTIL_TARG_AS_SRCS =
endif

BE_AS_OBJS = $(COMMON_UTIL_TARG_AS_SRCS:.s=.o)

#
# source files for be
#

BE_DRIVER_CXX_SRCS = \
  driver.cxx	     \
  driver_util.cxx	\
  iter.cxx	        \

BE_DRIVER_C_SRCS = \
  phase.c        

BE_DRIVER_CXX_OBJS = $(BE_DRIVER_CXX_SRCS:.cxx=.o) 
BE_DRIVER_C_OBJS = $(BE_DRIVER_C_SRCS:.c=.o) 
BE_DRIVER_OBJS = \
  $(BE_DRIVER_CXX_OBJS)	\
  $(BE_DRIVER_C_OBJS)   

# extra files to be removed with make clobber
LDIRT += ii_files so_locations  *.pch

LCINCS = $(addprefix -I, $(HEADER_DIRS))
LC++INCS = $(addprefix -I, $(HEADER_DIRS))
LASINCS = $(addprefix -I, $(HEADER_DIRS))

LCOPTS += $(STD_COMPILE_OPTS)
LCDEFS = $(HOSTDEFS) $(TARGDEFS)

#
# we specify -p_tused because there is only one C++ source file in be.so
#
LC++OPTS += $(STD_COMPILE_OPTS) $(WOFF2)
LC++OPTS += $(PCH_OPTS)
LC++DEFS = $(HOSTDEFS) $(TARGDEFS) 
LASOPTS = $(STD_COMPILE_OPTS)
LASDEFS = $(HOSTDEFS) $(TARGDEFS)

# setup stuff to build shared or non-shared
#GLDOPTS = $(STD_LOAD_OPTS) $(LD_QUICKSTART_INFO)

#DSOSTARTOPT = -update_registry $(TARG_BE_DIR)/so_locations -Wl,-no_unresolved
ifeq ($(BUILD_COMPILER), EDG)
DSOSTARTOPT = -check_registry $(TARG_BE_DIR)/so_locations -Wl,-no_unresolved
else
DSOSTARTOPT = 
endif
#DSOSTARTOPT = -Wl,-no_unresolved
DSOSTARTOPT_N32 = $(DSOSTARTOPT)
DSOSTARTOPT_32 = $(DSOSTARTOPT)
ifeq ($(BUILD_OS), IRIX)
BE_DSO_OPTS =  -none -lm -lgen
else
ifeq ($(BUILD_OS), CYGWIN)
LDFLAGS += -Wl,--disable-auto-import
#BE_DSO_OPTS = -lm 
else
BE_DSO_OPTS =  -lm -ldl
LDFLAGS += -Wl,--allow-shlib-undefined
endif
endif

ifeq ($(BUILD_COMPILER), EDG)
EXPORT_FILE_BE_SO = be.so.Exported
EXPORT_FILE_BE_SO_SRCS = $(BE_BE_DIR)/be.so.Exported $(TARG_INFO_INC_DIR)/targinfo.Exported
EXPORT_FILE_BE = $(BE_BE_DIR)/be.Exported
LDIRT += $(EXPORT_FILE)
EXPORT_LIST_BE_SO = -exports_file $(EXPORT_FILE_BE_SO)
EXPORT_LIST_BE = -exports_file $(EXPORT_FILE_BE)
else
EXPORT_FILE_BE_SO =
EXPORT_FILE_BE_SO_SRCS =
EXPORT_FILE_BE =
EXPORT_LIST_BE_SO =
EXPORT_LIST_BE =
endif
ifeq ($(BUILD_OS), CYGWIN)
EXPORT_DEFS = $(BE_BE_DIR)/be.so.Exported
endif
 
ifdef LOCAL_BE_LIBS
BE_DSO_OPTS += $(LOCAL_BE_LIBS)
LDFLAGS += $(LOCAL_BE_LIBS)
endif

ifeq ($(BUILD_VARIANT), MEM_STATS)
LCDEFS += -DMEM_STATS
LC++DEFS += -DMEM_STATS
BE_DSO_OPTS +=  -lmalloc
LDFLAGS += -lmalloc
endif

ifeq ($(BUILD_VARIANT), LICENSING)
ifeq ($(BUILD_OS), IRIX)
LCDEFS += -DCOMPILER_LICENSING
BE_DSO_OPTS +=  -llmsgi
endif
endif

#----------------------------------------------------------------------
#  Define target
#----------------------------------------------------------------------

ifeq ($(BUILD_VARIANT), BEDRIVER)
TARGETS = be
else
TARGETS = be$(DLL_EXT) be$(EXE_EXT)
endif

#----------------------------------------------------------------------
#  Variables describing additional sources, objects, and libraries
#----------------------------------------------------------------------
LLDLIBS = 

# We need to have one of the target .so's on the link line 
# while building cg.so . This is needed by the linker on linux.
# So, arbitrarily pick one of the target .so's to define TARGET_SO.
ifeq ($(BUILD_TARGET), MIPS)
TARGET_SO = r10000.so
endif
ifeq ($(BUILD_TARGET), IA64)
TARGET_SO = itanium.so
endif
ifeq ($(BUILD_TARGET), IA32)
TARGET_SO = pentium.so
endif

VPATH    =  $(SRC_DIRS)

ifeq ($(BUILD_COMPILER), EDG)
default: first so_locations derived_files $(TARGETS) last
else
default: first
	$(MAKE) derived_files
	$(MAKE) $(JOBS) $(TARGETS)
	$(MAKE) last
endif

#----------------------------------------------------------------------
#  The commands in this section are done BEFORE any other target is
#  built.
#----------------------------------------------------------------------
first:
	cd $(BUILD_AREA)/include && $(MAKE)
## verify that the targ info stuff is up to date.
	cd $(TARG_TARG_INFO_DIR) && $(MAKE)


#----------------------------------------------------------------------
#  The commands in this section are done AFTER every other target is
#  built.
#----------------------------------------------------------------------
last: make_deps


#----------------------------------------------------------------------
#  Build 'be'
#
#  These rules build the 'be' executable by default, and can install
#  it in the $(BUILD_INSTALL)/usr/lib32/cmplrs directory.
#
#----------------------------------------------------------------------

install:: default
	cp -f $(TARGETS) $(PREFIX)/lib/xcc-lib

preg_list.cxx : preg_list.h
preg_list.h : $(COMMON_UTIL_DIR)/gen_x_list.csh                   \
$(BE_COM_DIR)/gen_preg_list.csh
	csh -f	$(BE_COM_DIR)/gen_preg_list.csh $(COMMON_UTIL_DIR)

# here's the target that gets made recursively
derived_files : $(DERIVED_SRCS) $(DERIVED_INCS)

c_q_add.o: c_q_add.c $(COMMON_COM_DIR)/defs.h $(COMMON_UTIL_DIR)/quad.h
	$(CCF) -OPT:roundoff=0 -c $<

c_q_div.o: c_q_div.c $(COMMON_COM_DIR)/defs.h $(COMMON_UTIL_DIR)/quad.h
	$(CCF) -OPT:roundoff=0 -c $<

c_q_mul.o: c_q_mul.c $(COMMON_COM_DIR)/defs.h $(COMMON_UTIL_DIR)/quad.h
	$(CCF) -OPT:roundoff=0 -c $<

c_q_sqrt.o: c_q_sqrt.c $(COMMON_COM_DIR)/defs.h $(COMMON_UTIL_DIR)/quad.h
	$(CCF) -OPT:roundoff=0 -c $<

c_q_sub.o: c_q_sub.c $(COMMON_COM_DIR)/defs.h $(COMMON_UTIL_DIR)/quad.h
	$(CCF) -OPT:roundoff=0 -c $<

ifeq ($(BUILD_OS), IRIX)
symtab.o: symtab.cxx
	$(C++F) -ptused -c $<
endif

LDIRT += be wopt.$(DLL_EXT) be$(DLL_EXT) cg$(DLL_EXT) lno$(DLL_EXT) whirl2c$(DLL_EXT) whirl2f$(DLL_EXT) purple$(DLL_EXT) prompf_anl$(DLL_EXT)
LDIRT += ipl$(DLL_EXT) inline$(DLL_EXT) r4000.so r5000.so r8000.so r10000.so itanium.so pentium.so

ifeq ($(BUILD_PCH), USE_PCH)
common_com_pch_files: $(COMMON_COM_PCH_OBJS) common_com_pch.pch
be_com_pch_files: 	  $(BE_COM_PCH_OBJS) be_com_pch.pch
endif


ifeq ($(BUILD_COMPILER), EDG)
be$(EXE_EXT):  be$(DLL_EXT) $(BE_DRIVER_OBJS) $(LINK_DSO) $(EXPORT_FILE_BE) $(SO_LIBS)
	$(C++F) -o $@ $(BE_DRIVER_OBJS)	\
		$(EXPORT_LIST_BE) $(LDFLAGS)  $(BE_LIBS) -lgen $(LINK_DSO_OPTS) $(LINK_DSO) -ldl 
	/bin/rm -f bedriver
	if [ ! -l wopt.so ]; then ln -sf $(TARG_WOPT_DIR)/wopt.so .; fi
	if [ ! -l cg.so ]; then ln -sf $(TARG_CG_DIR)/cg.so .; fi
	if [ ! -l lno.so ]; then ln -sf ../lno/lno.so .; fi
	if [ ! -l whirl2c.so ]; then ln -sf ../whirl2c/whirl2c.so .; fi
	if [ ! -l whirl2f.so ]; then ln -sf ../whirl2f/whirl2f.so .; fi
	if [ ! -l purple.so ]; then ln -sf ../purple2/purple.so .; fi
	if [ ! -l prompf_anl.so ]; then ln -sf ../prompf_anl/prompf_anl.so .; fi
	if [ ! -l ipl.so ]; then ln -sf ../ipl/ipl.so .; fi
 ifeq ($(BUILD_TARGET), IA64)
	if [ ! -l itanium.so ]; then ln -sf $(TARG_TARG_INFO_DIR)/itanium.so .; fi
 endif
 ifeq ($(BUILD_TARGET), IA32)
	if [ ! -l pentium.so ]; then ln -sf $(TARG_TARG_INFO_DIR)/pentium.so .; fi
 endif
 ifeq ($(BUILD_TARGET), MIPS)
	if [ ! -l r4000.so ]; then ln -sf $(TARG_TARG_INFO_DIR)/r4000.so .; fi
	if [ ! -l r5000.so ]; then ln -sf $(TARG_TARG_INFO_DIR)/r5000.so .; fi
	if [ ! -l r8000.so ]; then ln -sf $(TARG_TARG_INFO_DIR)/r8000.so .; fi
	if [ ! -l r10000.so ]; then ln -sf $(TARG_TARG_INFO_DIR)/r10000.so .; fi
 endif
else

ifeq ($(BUILD_OS), CYGWIN)
#libs needed to build be.dll
SO_LIBS = \
	 cg$(IMP_EXT) \
	 wopt$(IMP_EXT) \
	 whirl2c$(IMP_EXT)
LIBAUTO = auto$(IMP_EXT)
LIBISA = xtisa$(IMP_EXT)
LIBTIE = tie$(IMP_EXT)
LIBCOMMON = common$(IMP_EXT)
#libs needed to build be.exe
BE_LIBS = \
	  be$(IMP_EXT) \
	  cg$(IMP_EXT) \
	  wopt$(IMP_EXT) \
	  whirl2c$(IMP_EXT) \
	  lno$(IMP_EXT)	\
	  ipl$(IMP_EXT) 
else
SO_LIBS =
LIBAUTO = libauto$(DLL_EXT)
LIBISA = libxtisa$(DLL_EXT)
LIBTIE = libtie$(DLL_EXT)
LIBCOMMON = libcommon$(DLL_EXT)
BE_LIBS = be$(DLL_EXT)
endif

IMP_LIBS = $(LIBAUTO) $(LIBISA) $(LIBTIE) $(LIBCOMMON)
BE_LIBS += $(IMP_LIBS)

$(LIBCOMMON): $(TARGDIR)/../libcommon/$(LIBCOMMON)
	ln -sf $< .

$(LIBISA): $(TARGDIR)/../libisa/$(LIBISA)
	ln -sf $< .

$(LIBTIE): $(TARGDIR)/../libtie/$(LIBTIE)
	ln -sf $< .

$(LIBAUTO): $(TARGDIR)/../libauto/$(LIBAUTO)
	ln -sf $< .

ifeq ($(BUILD_OS), CYGWIN)
wopt.imp.a: $(BUILD_TOT)/be/opt/Exported
	$(IMPORT_LIB) --def $(BUILD_TOT)/be/opt/Exported -l wopt.imp.a --dllname wopt.dll
endif

ifneq ($(EXE_EXT), )
be: be$(EXE_EXT)
endif

be$(EXE_EXT):  $(BE_DRIVER_OBJS) $(LINK_DSO) $(BE_LIBS)
#if [ ! -f be$(DLL_EXT) ]; then ln -fs $(TARG_BE_DIR)/be$(DLL_EXT) .; fi
	if [ ! -h cg$(DLL_EXT) ]; then ln -fs $(TARG_CG_DIR)/cg$(DLL_EXT) .; fi
	if [ ! -h wopt$(DLL_EXT) ]; then ln -fs $(TARG_WOPT_DIR)/wopt$(DLL_EXT) .; fi
	if [ ! -h lno$(DLL_EXT) ]; then ln -s -f ../lno/lno$(DLL_EXT) .; fi
	if [ ! -h ipl$(DLL_EXT) ]; then ln -s -f ../ipl/ipl$(DLL_EXT) .; fi
	if [ ! -h whirl2c$(DLL_EXT) ]; then ln -fs ../whirl2c/whirl2c$(DLL_EXT) .; fi
	if [ ! -h whirl2f$(DLL_EXT) ]; then ln -fs ../whirl2f/whirl2f$(DLL_EXT) .; fi
	if [ ! -h ipa$(DLL_EXT) ]; then ln -fs ../ipa/ipa$(DLL_EXT) .; fi
 ifeq ($(BUILD_TARGET), IA64)
	if [ ! -h itanium.so ]; then ln -sf $(TARG_TARG_INFO_DIR)/itanium.so .; fi
 endif
 ifeq ($(BUILD_TARGET), IA32)
	if [ ! -f pentium.so ]; then ln -sf $(TARG_TARG_INFO_DIR)/pentium.so .; fi
 endif
	$(C++F) -o $@ $(BE_DRIVER_OBJS) $(BE_LIBS) \
		$(LDFLAGS) $(LINK_DSO_OPTS) $(LINK_DSO) $(LMAIL)
endif

#so_locations : $(BE_BE_DIR)/so_locations
.PHONY: so_locations
so_locations : 
	cp $(BE_BE_DIR)/so_locations so_locations
	chmod u+w so_locations


$(EXPORT_FILE_BE_SO): $(EXPORT_FILE_BE_SO_SRCS)
	cat $(EXPORT_FILE_BE_SO_SRCS) | sort | uniq > $(EXPORT_FILE_BE_SO)

ifeq ($(BUILD_PCH), USE_PCH)
be$(DLL_EXT):  $(BE_C_OBJS) $(BE_CXX_OBJS) $(COMMON_COM_PCH_OBJS) $(BE_COM_PCH_OBJS) \
		$(BE_AS_OBJS) $(BE_BE_DIR)/so_locations $(EXPORT_FILE_BE_SO)
	$(C++F) $(STD_DSO_LOADOPTS) $(EXPORT_LIST_BE_SO) $(BE_C_OBJS) \
		$(BE_CXX_OBJS) $(COMMON_COM_PCH_OBJS) $(BE_COM_PCH_OBJS) \
		$(BE_AS_OBJS) -o $@ $(BE_DSO_OPTS)

else
ifeq ($(BUILD_OS), CYGWIN)
LINK_OPTIONS = -Wl,--export-all -Wl,--disable-auto-import \
		-Wl,--out-implib=be$(IMP_EXT)
else
LINK_OPTIONS = 
endif

be$(DLL_EXT):	$(BE_C_OBJS) $(BE_CXX_OBJS) $(BE_AS_OBJS) \
		$(BE_BE_DIR)/so_locations \
		$(EXPORT_FILE_BE_SO) $(TARG_INFO_LIB_DIR)/libaccess.o \
	   	$(TARG_INFO_LIB_DIR)/libti.a \
		$(SO_LIBS) \
		$(IMP_LIBS)
	$(CXX_DLL) \
		$(STD_DSO_LOADOPTS) $(EXPORT_LIST_BE_SO) $(BE_C_OBJS) \
		$(BE_CXX_OBJS) $(BE_AS_OBJS) \
		$(SO_LIBS) \
		$(LINK_TARGET_SO) \
		$(LINK_OPTIONS) \
		$(TARG_INFO_LIB_DIR)/libaccess.o \
		$(TARG_INFO_LIB_DIR)/libti.a \
		$(IMP_LIBS) \
		-o $@ $(BE_DSO_OPTS) \
		$(LMAIL)
endif
#----------------------------------------------------------------------
#  Include the usual commonrules
#----------------------------------------------------------------------
include $(COMMONRULES)

#----------------------------------------------------------------------
#  Special case rules for files that want to be individualistic
#----------------------------------------------------------------------

.cxx.pch:
	$(C++F) -c $(.IMPSRC)

ifeq ($(BUILD_COMPILER), EDG)
DSONAMEOPT = -soname be.so
else
DSONAMEOPT = -o be$(DLL_EXT)
endif

## Purify versions:
TARGETS_PURE = be.so.pure
be.so.pure: be.so
	purify be.so
pure: $(TARGETS_PURE)
install.pure:: pure
	$(STD_INSTALL) $(STD_INSTALL_EXEC_MASK) -F $(STD_MONGOOSE_LOC) be.so.pure
