#
# Copyright (C) 2003-2005 Tensilica, Inc.  All Rights Reserved.
# Revised to support Tensilica processors and to improve overall performance
#
#  Copyright (C) 2000 Silicon Graphics, Inc.  All Rights Reserved.
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of version 2 of the GNU General Public License as
#  published by the Free Software Foundation.
#
#  This program is distributed in the hope that it would be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
#
#  Further, this software is distributed without any warranty that it is
#  free of the rightful claim of any third person regarding infringement 
#  or the like.  Any license provided herein, whether implied or 
#  otherwise, applies only to this software file.  Patent licenses, if 
#  any, provided herein do not apply to combinations of this program with 
#  other software, or any other product whatsoever.  
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write the Free Software Foundation, Inc., 59
#  Temple Place - Suite 330, Boston MA 02111-1307, USA.
#
#  Contact information:  Silicon Graphics, Inc., 1600 Amphitheatre Pky,
#  Mountain View, CA 94043, or:
#
#  http://www.sgi.com
#
#  For further information regarding this notice, see:
#
#  http://oss.sgi.com/projects/GenInfo/NoticeExplan
#
#

#
#  Makefile.base for ipl
#

#----------------------------------------------------------------------
#  Set environment variables
#
#  TARGDIR   :  is the targ specific directory in which we do build.
#               e.q.  /d1/cmplrs.src/v4.00/host32
#
#----------------------------------------------------------------------
TARGDIR = $(BUILD_AREA)
CURDIR  = .

#----------------------------------------------------------------------
#  Include the usual commondefs
#----------------------------------------------------------------------
include $(COMMONDEFS)

#----------------------------------------------------------------------
#  Set environment variables
#
#  TARG_BE_DIR: is the be directory with which we do build... this can
#               be retargeted (e.g., for building be with different options)
#               by setting LOCAL_BE_DIR in localdefs
#  TARG_OPT_DIR: is the opt directory with which we do build... this can
#               be retargeted (e.g., for building opt with different options)
#               by setting LOCAL_OPT_DIR in localdefs
#----------------------------------------------------------------------

ifeq ($(BUILD_COMPILER), EDG)
CVERSION  =  -xansi
endif

ifdef LOCAL_BE_DIR
TARG_BE_DIR = $(TARGDIR)/$(LOCAL_BE_DIR)
else
TARG_BE_DIR = $(TARGDIR)/be
endif
ifdef LOCAL_OPT_DIR
TARG_OPT_DIR = $(TARGDIR)/$(LOCAL_OPT_DIR)
else
TARG_OPT_DIR = $(TARGDIR)/wopt
endif


#----------------------------------------------------------------------
#  Compiler Options
#----------------------------------------------------------------------
HOSTDEFS += -Dsgi -DMONGOOSE_BE
HOSTDEFS += -Dlonglong -DIPA_SUMMARY
# need to define _LONGLONG and _SVR4_SOURCE to allow compilation with -ansi.
HOSTDEFS += -D_LONGLONG -D_SVR4_SOURCE

ifeq ($(BUILD_OPTIMIZE), DEBUG)
HOSTDEFS += -DIs_True_On	
HOSTDEFS += -DInsist_On
endif

ifeq ($(BUILD_TARGET), IA64)
HOSTDEFS += -D__MIPS_AND_IA64_ELF_H
endif
ifeq ($(BUILD_TARGET), IA32)
HOSTDEFS += -D__MIPS_AND_IA64_ELF_H
endif
ifeq ($(BUILD_TARGET), XTENSA)
HOSTDEFS += -D__MIPS_AND_IA64_ELF_H
endif

ifeq ($(BUILD_OS), CYGWIN)
HOSTDEFS += -DDLL_SHARED=__declspec\(dllimport\)
else
HOSTDEFS += -DDLL_SHARED=
endif


#----------------------------------------------------------------------
#  List of directories, and source files of interest
#----------------------------------------------------------------------
LIBISA_DIR		= $(BUILD_TOT)/../libisa
LIBTIE_DIR		= $(BUILD_TOT)/../libtie
LIBAUTO_DIR		= $(BUILD_TOT)/../libauto
LIBCOMMON_DIR		= $(BUILD_TOT)/../libcommon

IPA_DIR                 = $(BUILD_TOT)/ipa
IPA_COMMON_DIR          = $(IPA_DIR)/common
IPA_LOCAL_DIR           = $(IPA_DIR)/local
IPA_MAIN_DIR            = $(IPA_DIR)/main
IPA_OPTIMIZE_DIR        = $(IPA_MAIN_DIR)/optimize
IPA_ANALYZE_DIR         = $(IPA_MAIN_DIR)/analyze
BE_DIR                  = $(BUILD_TOT)/be
BE_BE_DIR		= $(BE_DIR)/be
BE_CG_DIR               = $(BE_DIR)/cg
BE_COM_DIR              = $(BE_DIR)/com
BE_OPT_DIR              = $(BE_DIR)/opt
BE_LNOPT_DIR            = $(BE_DIR)/lno
BE_VHO_DIR		= $(BE_DIR)/vho
BE_REGION_DIR           = $(BE_DIR)/region
COMMON_DIR              = $(BUILD_TOT)/common
COMMON_COM_DIR          = $(COMMON_DIR)/com
COMMON_TARG_INFO_DIR	= $(COMMON_DIR)/targ_info
COMMON_TARG_INFO_LIBTI  = $(COMMON_DIR)/targ_info/libti
COMMON_COM_TARG_DIR	= $(COMMON_TARG_INFO_DIR)/static/common/com/$(BUILD_TARGET_DIR)
COMMON_UTIL_TARG_DIR	= $(COMMON_TARG_INFO_DIR)/static/common/util/$(BUILD_TARGET_DIR)
COMMON_ACCESS_DIR	= $(COMMON_TARG_INFO_DIR)/static/access
COMMON_UTIL_DIR         = $(COMMON_DIR)/util
INCLUDE_DIR             = $(ROOT)/usr/include

# These are the directories in which to look for source files.

SRC_DIRS = \
  $(IPA_COMMON_DIR)   \
  $(IPA_LOCAL_DIR)    \
  $(IPA_ANALYZE_DIR)  \
  $(BE_COM_DIR)   \
  $(BE_LNOPT_DIR) \
  $(COMMON_UTIL_DIR)

HEADER_DIRS = \
  $(SRC_DIRS)		\
  $(LIBISA_DIR)		\
  $(LIBTIE_DIR)		\
  $(LIBAUTO_DIR)	\
  $(LIBCOMMON_DIR)	\
  $(COMMON_COM_DIR)	\
  $(COMMON_COM_TARG_DIR)\
  $(COMMON_ACCESS_DIR)\
  $(COMMON_TARG_INFO_LIBTI) \
  $(COMMON_UTIL_DIR)	\
  $(COMMON_TDT_DIR)	\
  $(BE_COM_DIR)		\
  $(BE_OPT_DIR)		\
  $(BE_CG_DIR)		\
  $(BE_LNOPT_DIR)       \
  $(BE_VHO_DIR)		\
  $(BE_REGION_DIR)      \
  $(TARGDIR)/be         \
  $(TARGDIR)/targ_info

IPA_LOCAL_CXX_SRCS = \
	ipl_main.cxx \
	ipl_bread_write.cxx \
	ipl_summary_print.cxx \
	ipl_summarize_util.cxx \
	ipl_tlog.cxx \
	init.cxx \
	ipl_elfsym.cxx

#BE_COM_CXX_SRCS = \
#   ipa_section.cxx \
#   ipa_section_main.cxx \
#   ipa_section_print.cxx \
#   ipl_lno_util.cxx \
#   reshape.cxx \
#   wb_summary.cxx \
#   wb_ipl_summary.cxx \

BE_COM_CXX_SRCS = \

BE_LNO_CXX_SRCS = \
   lwn_util.cxx \

COMMON_UTIL_CXX_SRCS = \
   cxx_memory.cxx

IPA_CXX_SRCS = \
   $(IPA_LOCAL_CXX_SRCS) \
   $(BE_COM_CXX_SRCS) \
   $(BE_LNO_CXX_SRCS) \
   $(COMMON_UTIL_CXX_SRCS)

IPA_CXX_OBJS = $(IPA_CXX_SRCS:.cxx=.o)

VPATH    =  $(SRC_DIRS)

LCOPTS = $(STD_COMPILE_OPTS)
LCDEFS = $(HOSTDEFS) $(TARGDEFS)
LCINCS = $(addprefix -I, $(HEADER_DIRS))

ifeq ($(BUILD_COMPILER), EDG)
LC++OPTS = $(STD_COMPILE_OPTS) $(STD_C++_OPTS) -fullwarn -woff 1171,1172,1174,1201,1209,1375
else
LC++OPTS = $(STD_COMPILE_OPTS) $(STD_C++_OPTS) 
endif

LC++DEFS = $(HOSTDEFS) $(TARGDEFS)
LC++INCS = $(LCINCS)
LASOPTS = $(STD_COMPILE_OPTS)
LASDEFS = $(HOSTDEFS) $(TARGDEFS)
LASINCS = $(LCINCS)

ifeq ($(BUILD_COMPILER), EDG)
WOFF = -fullwarn
endif

GLDOPTS = $(STD_LOAD_OPTS) $(LD_QUICKSTART_INFO)

ifeq ($(BUILD_COMPILER), EDG)
DSOSTARTOPT = -check_registry $(TARG_BE_DIR)/so_locations -Wl,-no_unresolved
else
DSOSTARTOPT = 
endif
DSOSTARTOPT_32 = $(DSOSTARTOPT)
DSOSTARTOPT_N32 = $(DSOSTARTOPT)

ifeq ($(BUILD_VARIANT), MEM_STATS)
LCDEFS += -DMEM_STATS
LC++DEFS += -DMEM_STATS
LLDLIBS +=  -lmalloc
LDFLAGS += -lmalloc
endif

#----------------------------------------------------------------------
# File containing the list of symbols exported outside of ipl.so
#----------------------------------------------------------------------
ifeq ($(BUILD_COMPILER), EDG)
EXPORT_LIST = -exports_file $(IPA_LOCAL_DIR)/Exported
endif

TARGETS = ipl$(DLL_EXT)

LDIRT = be.$(DLL_EXT) wopt$(DLL_EXT) be ipl ii_files

ifeq ($(BUILD_COMPILER), EDG)
LLDLIBS = -none
endif

default: first
	$(MAKE) $(JOBS) $(TARGETS)
	$(MAKE) last

#----------------------------------------------------------------------
#  The commands in this section are done BEFORE any other target is
#  built.
#----------------------------------------------------------------------
first:
## verify that be.so is up to date
	cd $(TARG_BE_DIR) && $(MAKE)

#----------------------------------------------------------------------
#  The commands in this section are done AFTER every other target is
#  built.
#----------------------------------------------------------------------
last: make_deps

install:: default
	cp -f $(TARGETS) $(PREFIX)/lib/xcc-lib


#ipl: $(IPA_CXX_OBJS) $(IPA_DSOS)
#	$(CXX_DLL) -o $@ $(IPA_CXX_OBJS) $(IPA_DSOS) $(LDFLAGS)
#	if [ ! -l wopt$(DLL_EXT) ]; then ln -sf $(TARG_OPT_DIR)/wopt$(DLL_EXT) .; fi
#	if [ ! -l be$(DLL_EXT) ]; then ln -sf $(TARG_BE_DIR)/be$(DLL_EXT) .; fi

LINK_DSOS = be$(IMP_EXT)
ifeq ($(BUILD_OS), CYGWIN)
LINK_DSOS += wopt$(IMP_EXT)
LINK_OPTIONS = -Wl,--disable-auto-import
endif

be$(IMP_EXT): $(TARG_BE_DIR)/be$(IMP_EXT)
	ln -sf $< .

ifeq ($(BUILD_OS), CYGWIN)
wopt$(IMP_EXT): $(TARG_OPT_DIR)/wopt$(IMP_EXT)
	ln -sf $< .
endif

ipl$(DLL_EXT): $(IPA_CXX_OBJS) $(LINK_DSOS) \
		$(BE_BE_DIR)/so_locations $(IPA_LOCAL_DIR)/Exported
	$(CXX_DLL) -o $@  $(STD_DSO_LOADOPTS) $(EXPORT_LIST)	\
		$(IPA_CXX_OBJS)			\
		$(LINK_DSOS) $(LLDLIBS)				\
		$(LINK_OPTIONS)	
	if [ ! -f wopt$(DLL_EXT) ] ; then ln -sf $(TARG_OPT_DIR)/wopt$(DLL_EXT) .; fi
	if [ ! -f be$(DLL_EXT) ] ; then ln -sf $(TARG_BE_DIR)/be$(DLL_EXT) .; fi
	if [ ! -f ipl ] ; then ln -sf ../be/be ipl; fi
#----------------------------------------------------------------------
#  Include the usual commonrules
#----------------------------------------------------------------------
include $(COMMONRULES)

