#
# Copyright (C) 2004-2005 Tensilica, Inc.  All Rights Reserved.
# Revised to support Tensilica processors and to improve overall performance
#
#  Copyright (C) 2000 Silicon Graphics, Inc.  All Rights Reserved.
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of version 2 of the GNU General Public License as
#  published by the Free Software Foundation.
#
#  This program is distributed in the hope that it would be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
#
#  Further, this software is distributed without any warranty that it is
#  free of the rightful claim of any third person regarding infringement 
#  or the like.  Any license provided herein, whether implied or 
#  otherwise, applies only to this software file.  Patent licenses, if 
#  any, provided herein do not apply to combinations of this program with 
#  other software, or any other product whatsoever.  
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write the Free Software Foundation, Inc., 59
#  Temple Place - Suite 330, Boston MA 02111-1307, USA.
#
#  Contact information:  Silicon Graphics, Inc., 1600 Amphitheatre Pky,
#  Mountain View, CA 94043, or:
#
#  http://www.sgi.com
#
#  For further information regarding this notice, see:
#
#  http://oss.sgi.com/projects/GenInfo/NoticeExplan
#
#

#
#  Makefile.base for ir_tools
#

include	$(COMMONDEFS)

CVERSION =
LCOPTS += $(STD_COMPILE_OPTS)
ifeq ($(BUILD_COMPILER), EDG)
WOFF += -fullwarn
else
WOFF +=
endif
HOSTDEFS += -DIR_TOOLS
HOSTDEFS += -D_NEW_SYMTAB
ifeq ($(BUILD_TARGET), IA64)
TARGDEFS += -D__MIPS_AND_IA64_ELF_H
endif
ifeq ($(BUILD_TARGET), IA32)
TARGDEFS += -D__MIPS_AND_IA64_ELF_H
endif
ifeq ($(BUILD_TARGET), XTENSA)
TARGDEFS += -D__MIPS_AND_IA64_ELF_H
endif

HOSTDEFS += -DDLL_SHARED=

ifeq ($(BUILD_OPTIMIZE), DEBUG)
# don't use is_true_on because ir_a2b doesn't have config info
LCDEFS += -DInsist_On -DDEBUG_IR
endif

LCDEFS += $(HOSTDEFS) $(TARGDEFS)
LC++DEFS += $(HOSTDEFS) $(TARGDEFS)

GLDOPTS = $(STD_LOAD_OPTS)

LIBCOMUTIL = $(BUILD_AREA)/libcomutil/libcomutil.a
EXTRA_LIBS = \
        $(BUILD_AREA)/targ_info/libti.a \
        $(BUILD_AREA)/../libisa/libisa.a \
        $(BUILD_AREA)/../libtie/libtie.a \
        $(BUILD_AREA)/../libcommon/libcommon.a
EXPAT_LIB = -Wl,-Bstatic -lexpat -Wl,-Bdynamic

ifeq ($(BUILD_COMPILER), EDG)
LLDLIBS	= $(LIBCOMUTIL) -lgen -lm
else
ifneq ($(BUILD_OS), CYGWIN)
LLDLIBS = $(LIBCOMUTIL) $(EXTRA_LIBS) $(EXPAT_LIB) -ldl -lm
else
LLDLIBS = $(LIBCOMUTIL) $(EXTRA_LIBS) $(EXPAT_LIB) -lm
endif
endif

ifneq ($(BUILD_OS), CYGWIN)
LDFLAGS += -Wl,-rpath -Wl,$(STDTOOLS)/lib
endif

TARGETS = ir_b2a ir_size

LIBISA_DIR= $(BUILD_TOT)/../libisa
LIBTIE_DIR= $(BUILD_TOT)/../libtie
LIBAUTO_DIR= $(BUILD_TOT)/../libauto
LIBCOMMON_DIR= $(BUILD_TOT)/../libcommon

COMMON_UTIL_DIR= $(BUILD_TOT)/common/util
COMMON_COM_DIR= $(BUILD_TOT)/common/com
COMMON_TARG_INFO_DIR= $(BUILD_TOT)/common/targ_info
COMMON_COM_TARG_DIR= $(COMMON_TARG_INFO_DIR)/static/common/com/$(BUILD_TARGET_DIR)
COMMON_ACCESS_DIR= $(COMMON_TARG_INFO_DIR)/static/access
COMMON_TARG_INFO_LIBTI_DIR= $(BUILD_TOT)/common/targ_info/libti
TARG_TARGINFO_DIR= $(BUILD_AREA)/targ_info

LDIRT = ir_a2b ir_sel

LCINCS = -I$(BUILD_BASE) -I$(COMMON_COM_DIR) -I$(COMMON_COM_TARG_DIR) \
	-I$(COMMON_UTIL_DIR) -I$(COMMON_TARG_INFO_LIBTI_DIR) \
	-I$(COMMON_ACCESS_DIR) \
	-I$(TARG_TARGINFO_DIR) -I$(LIBISA_DIR) -I$(LIBTIE_DIR) -I$(LIBAUTO_DIR) -I$(LIBCOMMON_DIR) $(XINC)
ifeq ($(BUILD_OS), LINUX)
LCINCS += -I$(BUILD_AREA)/include/libelf
endif
ifeq ($(BUILD_ARCH), XTENSA)
PARAMS_DIR = $(BUILD_AREA)/../xtparams
LCINCS += -I$(BUILD_TOT)/../xtparams
LDLIBS += $(PARAMS_DIR)/libxtparams.a
endif
ifeq ($(BUILD_OS), SOLARIS)
LCINCS += -I$(BUILD_AREA)/include/libelf
endif

LCXXOPTS = $(LCOPTS)
LCXXDEFS = $(LCDEFS)
LCXXINCS = $(LCINCS)

ifeq ($(BUILD_OS), SOLARIS)
COMMON_UTIL_SRC = \
	strsep.c
endif
COMMON_COM_TARG_SRC = \
	config_host.c \
	config_platform.c \


CFILES= \
	$(COMMON_COM_SRC) \
	$(COMMON_COM_TARG_SRC) \
	$(COMMON_UTIL_SRC)

COMMON_COM_CXX_SRC =	\
	config.cxx	\
	config_elf_targ.cxx \
	const.cxx	\
	dwarf_DST.cxx	\
	dwarf_DST_dump.cxx	\
	dwarf_DST_mem.cxx	\
	glob.cxx	\
	ir_bcom.cxx	\
	ir_bread.cxx	\
	ir_bwrite.cxx	\
	ir_reader.cxx	\
	irbdata.cxx	\
	mtypes.cxx	\
	opcode.cxx	\
	opcode_core.cxx	\
	pu_info.cxx	\
	strtab.cxx	\
	symtab.cxx	\
	symtab_verify.cxx	\
	tie.cxx		\
	wn.cxx		\
	wn_map.cxx	\
	wn_pragmas.cxx	\
	wn_simp.cxx	\
	wn_util.cxx	\
	wutil.cxx	\
	xstats.cxx	\


COMMON_COM_TARG_CXX_SRCS =	\
	config_targ.cxx	\
	targ_const.cxx	\
	targ_sim.cxx	\

CXXFILES =		\
	$(COMMON_COM_CXX_SRC) \
	$(COMMON_COM_TARG_CXX_SRCS)

ifeq ($(BUILD_OS), CYGWIN)
CFILES += winutil.c
endif

default: first
	$(MAKE) $(JOBS) $(TARGETS)
	$(MAKE) last
	

first:
	cd $(BUILD_AREA)/include && $(MAKE)
	cd $(BUILD_AREA)/libcomutil && $(MAKE)
	cd $(BUILD_AREA)/targ_info && $(MAKE)

last: make_deps

install: default 
	$(STD_INSTALL) -F /usr/sbin ir_b2a
	$(STD_INSTALL) -lns ir_b2a -F /usr/sbin ir_a2b
	$(STD_INSTALL) -lns ir_b2a -F /usr/sbin ir_sel
	$(STD_INSTALL) -F /usr/sbin ir_size

ifeq ($(BUILD_OS), SOLARIS)
strsep.c:

strsep.o: $(COMMON_UTIL_DIR)/strsep.c
	$(CC) -c $(CPPFLAGS) $(CXXFLAGS) $< -o $@
endif
ifeq ($(BUILD_OS), CYGWIN)
winutil.c:

winutil.o: $(COMMON_UTIL_DIR)/winutil.c
	$(CC) -c $(CPPFLAGS) $(CFLAGS) $< -o $@
endif


include $(COMMONRULES)

VPATH = $(BUILD_BASE) $(COMMON_COM_DIR) $(COMMON_COM_TARG_DIR)

ir_b2a: $(OBJECTS) ir_a2b.o
	$(C++F) -o ir_b2a ir_a2b.o $(OBJECTS) $(LDFLAGS)

ir_a2b: ir_b2a
	ln -sf ir_b2a ir_a2b

ir_sel: ir_b2a
	ln -sf ir_b2a ir_sel

ir_size: $(OBJECTS) ir_size.o ir_b2a
	$(C++F) -o ir_size ir_size.o $(OBJECTS) $(LDFLAGS)

ir_walker: $(OBJECTS) ir_walker.o
	$(C++F) -o ir_walker ir_walker.o $(OBJECTS) $(LDFLAGS)

